# Reusable Documentation Generation Workflow
# Usage: Copy this to your repository's .github/workflows/docs.yml
# or reference it as a reusable workflow

name: Generate Documentation

on:
  workflow_call:
    inputs:
      repository_name:
        description: "Name of the repository"
        required: true
        type: string
      go_version:
        description: "Go version to use"
        required: false
        type: string
        default: "1.24"
      generate_examples:
        description: "Whether to generate examples documentation"
        required: false
        type: boolean
        default: true
      skip_commit:
        description: "Skip committing generated documentation"
        required: false
        type: boolean
        default: false
      create_pr:
        description: "Create a pull request instead of direct commit (for protected branches)"
        required: false
        type: boolean
        default: false
    secrets:
      app_id:
        description: "GitHub App ID for authentication"
        required: true
      app_private_key:
        description: "GitHub App private key for authentication"
        required: true

# Permissions required for auto-committing generated documentation
permissions:
  contents: write
  pull-requests: write

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    if: github.ref_type != 'tag'

    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.app_id }}
          private-key: ${{ secrets.app_private_key }}

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Install Kolosys documentation tools
        run: |
          echo "📥 Installing Kolosys documentation tools..."

          # Clone the documentation generator from GitHub (includes templates)
          # Use the GitHub App token for private repository access
          git clone --depth 1 --branch main https://${{ steps.app-token.outputs.token }}@github.com/kolosys/.actions.git .kolosys-tools

      - name: Generate documentation configuration
        run: |
          echo "⚙️ Generating documentation configuration..."

          # Create default config if it doesn't exist
          if [ ! -f "docs-config.json" ] && [ ! -f "kolosys-docs.json" ]; then
            echo "📝 Creating default configuration..."
            cat > kolosys-docs.json << EOF
          {
            "repository": {
              "name": "${{ inputs.repository_name }}",
              "owner": "kolosys",
              "description": "Documentation for ${{ inputs.repository_name }}",
              "import_path": "github.com/kolosys/${{ inputs.repository_name }}"
            },
            "packages": [
              {
                "name": "${{ inputs.repository_name }}",
                "description": "Main package",
                "priority": 1
              }
            ],
            "docs": {
              "root_dir": "../..",
              "docs_dir": "../../docs"
            },
            "discovery": {
              "enabled": false,
              "exclude_patterns": [],
              "include_only_with_godoc": false
            },
            "output": {
              "generate_combined_api": true,
              "generate_examples": ${{ inputs.generate_examples }},
              "verbose": true
            }
          }
          EOF
          fi

      - name: Build documentation
        run: |
          echo "🚀 Building ${{ inputs.repository_name }} documentation..."

          # Copy config to docgen directory and run from there
          # This way templates/ is naturally available
          cp kolosys-docs.json .kolosys-tools/docgen/
          cd .kolosys-tools/docgen

          # Download dependencies for the docgen tool
          go mod download

          # Run the documentation generator
          go run .

      - name: Verify generated documentation
        run: |
          echo "📋 Checking generated documentation files..."
          ls -la docs/ || echo "No docs directory found"
          if [ -d "docs" ]; then
            echo "📁 Contents of docs directory:"
            find docs -name "*.md" -type f | head -10
            echo "📊 Total markdown files: $(find docs -name "*.md" -type f | wc -l)"
          fi

      - name: Cleanup
        run: |
          # Remove temporary files
          rm -rf .kolosys-tools docs-templates

      - name: Debug workflow inputs
        run: |
          echo "skip_commit: ${{ inputs.skip_commit }}"
          echo "create_pr: ${{ inputs.create_pr }}"
          echo "event_name: ${{ github.event_name }}"
          echo "ref: ${{ github.ref }}"
          echo "Should create PR: ${{ !inputs.skip_commit && inputs.create_pr && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main' }}"
          echo "Should direct commit: ${{ !inputs.skip_commit && !inputs.create_pr && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main' }}"

      - name: Create Pull Request for generated documentation
        if: ${{ !inputs.skip_commit && inputs.create_pr == true && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main' }}
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ steps.app-token.outputs.token }}
          commit-message: |
            📚 Auto-generate documentation from Go source code

            - Updated API documentation
            - Generated examples from source
            - Updated references
          title: "📚 Update documentation for ${{ inputs.repository_name }}"
          body: |
            ## 🤖 Automated Documentation Update

            This PR contains automatically generated documentation updates for **${{ inputs.repository_name }}**.

            ### 📋 Changes Include:
            - 🔄 Updated API documentation from Go source code
            - 📝 Generated examples from source
            - 📚 Updated reference documentation
            - 🎯 Processed shared templates with current configuration

            ### 🚀 Generated by:
            - **Workflow**: ${{ github.workflow }}
            - **Trigger**: ${{ github.event_name }}
            - **Commit**: ${{ github.sha }}

            This documentation is automatically generated and should be safe to merge.
          branch: "docs/update-${{ inputs.repository_name }}-${{ github.run_number }}"
          delete-branch: true
          committer: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

      - name: Check for documentation changes
        id: verify-docs-changed
        if: ${{ !inputs.skip_commit && inputs.create_pr == false && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main' }}
        run: |
          if [ -d "docs" ] && [ "$(find docs -name '*.md' -type f | wc -l)" -gt 0 ]; then
            if git diff --quiet --exit-code docs/; then
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "No documentation changes detected"
            else
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "Documentation changes detected"
              git diff --name-only docs/
            fi
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No docs directory or markdown files found"
          fi

      - name: Commit generated documentation (direct)
        if: ${{ !inputs.skip_commit && inputs.create_pr == false && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main' && steps.verify-docs-changed.outputs.changed == 'true' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: |
            📚 Auto-generate documentation from Go source code

            - Updated API documentation
            - Generated examples from source
            - Updated references

            [skip ci]
          file_pattern: "docs/"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          skip_dirty_check: true
          skip_fetch: true
          skip_checkout: true

      - name: Fallback commit (if auto-commit fails)
        if: ${{ !inputs.skip_commit && inputs.create_pr == false && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main' }}
        run: |
          if git diff --quiet HEAD -- docs/; then
            echo "No documentation changes to commit"
          else
            echo "Committing documentation changes manually..."
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add docs/
            git commit -m "📚 Auto-generate documentation from Go source code

            - Updated API documentation
            - Generated examples from source
            - Updated references

            [skip ci]" || echo "Commit failed or no changes"
            git push || echo "Push failed"
          fi
