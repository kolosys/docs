# Reusable CI Workflow
# Usage: Copy this to your repository's .github/workflows/ci.yml
# or reference it as a reusable workflow

name: Continuous Integration

on:
  workflow_call:
    inputs:
      go_version:
        description: "Go version to use"
        required: false
        type: string
        default: "1.24"
    secrets:
      app_id:
        description: "GitHub App ID for authentication"
        required: true
      app_private_key:
        description: "GitHub App private key for authentication"
        required: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.app_id }}
          private-key: ${{ secrets.app_private_key }}

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --fast-only --timeout=5m

      - name: Format Code
        run: go fmt ./...

      - name: Check for formatting changes
        id: verify-changed-files
        run: |
          if git diff --quiet --exit-code; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No formatting changes detected"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Formatting changes detected"
            git diff --name-only
          fi

      - name: Commit formatted code
        if: steps.verify-changed-files.outputs.changed == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Reformat code [skip ci]"
          file_pattern: "**/*.go"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          skip_dirty_check: true
          skip_fetch: true
          skip_checkout: true

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.21", "1.22", "1.23", "1.24"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        id: tests
        run: |
          go test ./... -v -covermode=atomic -coverprofile=coverage.out -race
          go tool cover -func=coverage.out

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.out
          flags: unittests
          fail_ci_if_error: true

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.21", "1.22", "1.23", "1.24"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build
        run: go build -v ./...

      - name: Build examples
        run: |
          set -e  # Exit on any error
          find examples -name "go.mod" -exec dirname {} \; | while read -r dir; do
            echo "Building $dir..."
            (cd "$dir" && go mod download && go build -v .)
          done

      - name: Test build
        run: go test -c ./...
